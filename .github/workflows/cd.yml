name: CD Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  DOCKER_BUILDKIT: 1
  KUBECTL_VERSION: "1.28.0"
  HELM_VERSION: "3.13.0"

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Set version
        id: set-version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v$(date +'%Y%m%d')-${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/chm:${{ needs.prepare.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/chm:latest
            ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

  deploy-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}
      
      - name: Set up Kubernetes config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
      
      - name: Deploy with Kustomize
        run: |
          cd k8s/overlays/${{ needs.prepare.outputs.environment }}
          kubectl kustomize . | kubectl apply -f -
          kubectl -n chm-${{ needs.prepare.outputs.environment }} set image deployment/chm-app chm=${{ secrets.DOCKER_USERNAME }}/chm:${{ needs.prepare.outputs.version }}
          kubectl -n chm-${{ needs.prepare.outputs.environment }} rollout status deployment/chm-app --timeout=10m
      
      - name: Verify deployment
        run: |
          kubectl -n chm-${{ needs.prepare.outputs.environment }} get pods
          kubectl -n chm-${{ needs.prepare.outputs.environment }} get services
          kubectl -n chm-${{ needs.prepare.outputs.environment }} describe deployment chm-app

  deploy-helm:
    name: Deploy with Helm
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: needs.prepare.outputs.environment == 'production'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
      
      - name: Set up Kubernetes config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
      
      - name: Update Helm dependencies
        run: |
          helm dependency update helm/chm
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install chm helm/chm \
            --namespace chm \
            --create-namespace \
            --values helm/chm/values-${{ needs.prepare.outputs.environment }}.yaml \
            --set image.tag=${{ needs.prepare.outputs.version }} \
            --wait \
            --timeout 10m
      
      - name: Run Helm tests
        run: |
          helm test chm --namespace chm

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [prepare, deploy-kubernetes]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install test dependencies
        run: |
          pip install requests pytest
      
      - name: Get service URL
        id: get-url
        run: |
          if [[ "${{ needs.prepare.outputs.environment }}" == "production" ]]; then
            echo "url=https://api.chm.example.com" >> $GITHUB_OUTPUT
          else
            echo "url=https://api.chm-${{ needs.prepare.outputs.environment }}.example.com" >> $GITHUB_OUTPUT
          fi
      
      - name: Wait for service to be ready
        run: |
          for i in {1..30}; do
            if curl -f ${{ steps.get-url.outputs.url }}/health; then
              echo "Service is ready"
              break
            fi
            echo "Waiting for service... (attempt $i/30)"
            sleep 10
          done
      
      - name: Run smoke tests
        run: |
          pytest tests/smoke/ --base-url=${{ steps.get-url.outputs.url }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [prepare, deploy-kubernetes, smoke-test]
    if: failure()
    steps:
      - name: Set up Kubernetes config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
      
      - name: Rollback deployment
        run: |
          kubectl -n chm-${{ needs.prepare.outputs.environment }} rollout undo deployment/chm-app
          kubectl -n chm-${{ needs.prepare.outputs.environment }} rollout status deployment/chm-app --timeout=10m
      
      - name: Send failure notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            Deployment Failed and Rolled Back!
            Environment: ${{ needs.prepare.outputs.environment }}
            Version: ${{ needs.prepare.outputs.version }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [prepare, deploy-kubernetes, smoke-test]
    if: success()
    steps:
      - name: Send success notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            Deployment Successful!
            Environment: ${{ needs.prepare.outputs.environment }}
            Version: ${{ needs.prepare.outputs.version }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Create GitHub Release
        if: github.ref_type == 'tag'
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: ${{ needs.prepare.outputs.environment != 'production' }}