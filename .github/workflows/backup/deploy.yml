name: Build and Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'api/**'
      - 'backend/**'
      - 'core/**'
      - 'models/**'
      - 'services/**'
      - 'requirements*.txt'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'api/**'
      - 'backend/**'
      - 'core/**'
      - 'models/**'
      - 'services/**'
      - 'requirements*.txt'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: catherinevee/chm

jobs:
  # Check if Docker credentials are available
  check-docker-secrets:
    name: Check Docker Secrets
    runs-on: ubuntu-latest
    outputs:
      has-docker-secrets: ${{ steps.check.outputs.has-docker-secrets }}
    steps:
    - name: Check for Docker secrets
      id: check
      run: |
        if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "has-docker-secrets=true" >> $GITHUB_OUTPUT
          echo "✅ Docker secrets are configured"
        else
          echo "has-docker-secrets=false" >> $GITHUB_OUTPUT
          echo "⚠️ Docker secrets not configured - will build only"
        fi

  # Build and test Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: check-docker-secrets
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: needs.check-docker-secrets.outputs.has-docker-secrets == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ needs.check-docker-secrets.outputs.has-docker-secrets == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Test Docker image
      run: |
        echo "🧪 Testing Docker image..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} python --version
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} python -c "import sys; print('Python version:', sys.version)"

  # Deploy to environments
  deploy:
    name: Deploy to ${{ inputs.environment || 'development' }}
    runs-on: ubuntu-latest
    needs: [check-docker-secrets, build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ inputs.environment || 'development' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set deployment variables
      id: vars
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "version=latest" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Development
      if: steps.vars.outputs.environment == 'development'
      run: |
        echo "🚀 Deploying to Development environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Add your deployment commands here
        # Example: kubectl set image deployment/chm-app chm-app=${{ needs.build.outputs.image-tag }}

    - name: Deploy to Staging
      if: steps.vars.outputs.environment == 'staging'
      run: |
        echo "🚀 Deploying to Staging environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Add your staging deployment commands here

    - name: Deploy to Production
      if: steps.vars.outputs.environment == 'production'
      run: |
        echo "🚀 Deploying to Production environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Add your production deployment commands here

    - name: Run health checks
      run: |
        echo "🏥 Running health checks..."
        # Add health check commands here
        # Example: curl -f http://your-app-url/health

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment to ${{ steps.vars.outputs.environment }} successful!"
        else
          echo "❌ Deployment to ${{ steps.vars.outputs.environment }} failed!"
        fi

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check-docker-secrets, build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        echo "📝 Generating changelog..."
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "Previous tag: $PREV_TAG"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
        else
          echo "No previous tag found"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Image
          
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          ## Installation
          
          See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for installation instructions.
        draft: false
        prerelease: false