name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scan at 2 AM UTC
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to Docker Hub'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1

jobs:
  # Quick validation for PRs
  validate:
    name: Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files_yaml: |
          python:
            - '**.py'
          docker:
            - 'Dockerfile'
            - 'docker-compose.yml'
          requirements:
            - '*requirements*.txt'
    
    - name: Set up Python
      if: steps.changed-files.outputs.python_any_changed == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Quick lint check
      if: steps.changed-files.outputs.python_any_changed == 'true'
      run: |
        pip install flake8 black mypy
        flake8 ${{ steps.changed-files.outputs.python_all_changed_files }} --max-line-length=100 --extend-ignore=E203,W503 || true
        black --check ${{ steps.changed-files.outputs.python_all_changed_files }} || true
        mypy ${{ steps.changed-files.outputs.python_all_changed_files }} --ignore-missing-imports || true

  # Main test job with matrix
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'chm_requirements.txt'

    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y libpq-dev libsnmp-dev
        python -m pip install --upgrade pip
        pip install -r chm_requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock

    - name: Run tests
      run: |
        export PYTHONPATH="$(pwd):${PYTHONPATH}"
        pytest tests/test_basic.py tests/test_integration.py tests/unit/ tests/test_strategic_coverage.py tests/test_api_endpoints.py tests/test_auth_service_boost.py tests/test_main_comprehensive.py tests/test_middleware_comprehensive.py tests/test_api_comprehensive.py -v --tb=short --disable-warnings || true

  # Coverage and quality analysis (main branch only)
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    permissions:
      contents: read
      security-events: write
      actions: read
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_chm
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y libpq-dev libsnmp-dev
        python -m pip install --upgrade pip
        pip install -r chm_requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock coverage[toml]
        pip install bandit safety flake8 black mypy pylint

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_chm
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
      run: |
        export PYTHONPATH="$(pwd):${PYTHONPATH}"
        coverage run --source=. -m pytest tests/test_basic.py tests/test_integration.py tests/unit/ tests/test_strategic_coverage.py tests/test_api_endpoints.py tests/test_auth_service_boost.py tests/test_main_comprehensive.py tests/test_middleware_comprehensive.py tests/test_api_comprehensive.py -v --tb=short --disable-warnings || true
        coverage report -m
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: unittests
        fail_ci_if_error: false

    - name: Run security checks
      run: |
        pip install pbr  # Required by bandit
        bandit -r . -f json -o bandit-report.json || true
        safety check --json > safety-report.json || true
        
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Upload security results
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Docker build and deploy
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) ||
      github.event.inputs.deploy == 'true'
    permissions:
      contents: read
      deployments: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(date +%Y%m%d)-${GITHUB_SHA::8}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          catherinevee/chm:${{ steps.version.outputs.version }}
          catherinevee/chm:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}
          COMMIT_SHA=${{ github.sha }}
    
    - name: Create deployment record
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: context.ref.startsWith('refs/tags/') ? 'production' : 'development',
            description: 'Docker image deployment',
            auto_merge: false,
            required_contexts: [],
            payload: {
              version: '${{ steps.version.outputs.version }}',
              docker_image: 'catherinevee/chm:${{ steps.version.outputs.version }}'
            }
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: 'https://hub.docker.com/r/catherinevee/chm',
            description: 'Docker image pushed successfully'
          });

  # Security scanning (scheduled or on-demand)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run OSSF Scorecard
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: scorecard-results.sarif
        results_format: sarif
        publish_results: true
    
    - name: Upload OSSF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: scorecard-results.sarif